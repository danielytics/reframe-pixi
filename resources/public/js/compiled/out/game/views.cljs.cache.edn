{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name game.views, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, reagent reagent.core, reagent.core reagent.core}, :uses {dispatch re-frame.core}, :defs {pixi-renderer-internal {:protocol-inline nil, :meta {:file "/Users/dan/code/clojure/reframe-pixi/src/cljs/game/views.cljs", :line 6, :column 7, :end-line 6, :end-column 29, :arglists (quote ([]))}, :name game.views/pixi-renderer-internal, :variadic false, :file "src/cljs/game/views.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, pixi-renderer {:protocol-inline nil, :meta {:file "/Users/dan/code/clojure/reframe-pixi/src/cljs/game/views.cljs", :line 30, :column 7, :end-line 30, :end-column 20, :arglists (quote ([]))}, :name game.views/pixi-renderer, :variadic false, :file "src/cljs/game/views.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :started :stage :component-did-mount :js-obj :component-did-update :renderer :div :div.pixi.loading :reagent-render :foo :id :pixi/state :display-name :x :sprites}, :order [:sprites :stage :foo :x :y :js-obj :reagent-render :component-did-mount :component-did-update :display-name :div :id :pixi/state :renderer :started :div.pixi.loading]}, :doc nil}